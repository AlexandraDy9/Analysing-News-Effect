{
  "_args": [
    [
      {
        "raw": "gl-wiretap@^0.6.2",
        "scope": null,
        "escapedName": "gl-wiretap",
        "name": "gl-wiretap",
        "rawSpec": "^0.6.2",
        "spec": ">=0.6.2 <0.7.0",
        "type": "range"
      },
      "C:\\Users\\nica_\\Desktop\\nodejs\\node_modules\\gpu.js"
    ]
  ],
  "_from": "gl-wiretap@^0.6.2",
  "_hasShrinkwrap": false,
  "_id": "gl-wiretap@0.6.2",
  "_location": "/gl-wiretap",
  "_nodeVersion": "10.16.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/gl-wiretap_0.6.2_1569681446571_0.6623348653106713"
  },
  "_npmUser": {
    "name": "robertleeplummerjr",
    "email": "robertleeplummerjr@gmail.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gl-wiretap@^0.6.2",
    "scope": null,
    "escapedName": "gl-wiretap",
    "name": "gl-wiretap",
    "rawSpec": "^0.6.2",
    "spec": ">=0.6.2 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gpu.js"
  ],
  "_resolved": "https://registry.npmjs.org/gl-wiretap/-/gl-wiretap-0.6.2.tgz",
  "_shasum": "e4aa19622831088fbaa7e5a18d01768f7a3fb07c",
  "_shrinkwrap": null,
  "_spec": "gl-wiretap@^0.6.2",
  "_where": "C:\\Users\\nica_\\Desktop\\nodejs\\node_modules\\gpu.js",
  "author": "",
  "bugs": {
    "url": "https://github.com/robertleeplummerjr/gl-wiretap/issues"
  },
  "dependencies": {},
  "description": "A gl debugger that listens and replays gl (WebGL, WebGL2, and HeadlessGL) gpu commands",
  "devDependencies": {
    "mocha": "^6.1.4",
    "nyc": "^14.1.1",
    "sinon": "^7.3.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-fxy1XGiPkfzK+T3XKDbY7yaqMBmozCGvAFyTwaZA3imeZH83w7Hr3r3bYlMRWIyzMI/lDUvUMM/92LE2OwqFyQ==",
    "shasum": "e4aa19622831088fbaa7e5a18d01768f7a3fb07c",
    "tarball": "https://registry.npmjs.org/gl-wiretap/-/gl-wiretap-0.6.2.tgz",
    "fileCount": 5,
    "unpackedSize": 19893,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdj3AnCRA9TVsSAnZWagAAcG4P/RgxM7IUDOrhvzy834aK\nzXt+GqTcDajY7Ce9QPE/nx+HnhMiqZ9r7Yuh3gH+BaLW/P5dEJiBdCAXk8pV\n46kikmMiPIzUCmvqoSl8u6XmTpq1SAFv2vK109IFfto3QSFMScxDKnT627b4\npDGA/XLm2+HPyHD5IzGcm+QEECtkcaue1c9mJoUgtdrQxaFfBOpE6oH8aGG5\n/T2GM/IT0521tPAJVnA4b5Ts3LVolyMJ5f+UE/qohI4U18m1UDPJoxuWb4EX\n+TbzJpptC9+KJW/E4dv/4k2G8AeRSocQR2kMatRZlt862fpWNIyGH4fEzjoR\nQd3en3aFhXopNoE/aHXimrbSZFvDPrZ9kGF5TPDdySSjJ6lnRAfWNf4GuxY8\nMrLAs0SksGnsNGimFo5rebK+e+lV/EyvRZ/Xr+90iGTjTfBTATvIw5dyzGBA\nFJ8Vpupe3wd7YpVYR0UHNCWbY6IJEu4+S/3//yo8AmE38iT5S3i1WRCIiFTl\nUXJsfr01z/X+5eozis8I+Jrgd9H+Y22dQriH2dDo0P7c1Tc/VhXLTm+O1plz\n1G3Bb9hIHrg4a6HO03EwY9vmSkDDqf+8ITXbo7lsCUFfzpSGoq1v3J8QVCm8\n3gFMgZ+EUC6rDS+VuYpH1X9r5baJCQg3yvDIXL5bya9nnjpWdlzhKMJcU1HS\njYqY\r\n=n8s3\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js",
    "index.d.ts"
  ],
  "gitHead": "442209dbe8db124d966cc1b03728fb5e9bd6359d",
  "homepage": "https://github.com/robertleeplummerjr/gl-wiretap#readme",
  "keywords": [
    "gpu",
    "webgl",
    "webgl2",
    "headless-gl",
    "gl",
    "listen",
    "listener",
    "proxy",
    "debug",
    "debugging"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "robertleeplummerjr",
      "email": "robertleeplummerjr@gmail.com"
    }
  ],
  "name": "gl-wiretap",
  "optionalDependencies": {},
  "readme": "# gl-wiretap\nA gl debugger that listens and replays gl (WebGL, WebGL2, and HeadlessGL) gpu commands\n\n## Example\n```js\nconst gl = glWiretap(realGL);\n\n// do a bunch of webgl commands..\n\n// then later, get all commands as a string of runnable javascript\nconst commands = gl.toString();\n\n// possibly write commands to file, for unit testing or reproducing bug\nrequire('fs').writeFileSync('./file.js',\n    // create a `gl` variable for the script to use\n    \"const canvas = document.createElement('canvas');\"\n    + \"const gl = canvas.getContext('webgl');\"\n    + commands\n);\n```\n\n## WebGL Usage\n```js\nconst canvas = document.createElement('canvas');\nconst realGL = canvas.getContext('webgl');\nconst gl = glWiretap(realGL);\n```\n\n## WebGL2 Usage\n```js\nconst canvas = document.createElement('canvas');\nconst realGL = canvas.getContext('webgl2');\nconst gl = glWiretap(realGL);\n```\n\n## HeadlessGL Usage\n```js\nconst { glWiretap } = require('gl-wiretap');\nconst realGL = require('gl')(1, 1);\nconst gl = glWiretap(realGL);\n```\n\nSee [the HeadlessGL project](https://github.com/stackgl/headless-gl) for more information on using it.\n\n## API\n```js\nconst gl = glWiretap(realGL, options);\n\n// do a bunch of webgl commands..\n\n// then later, see all commands ran\nconst commands = gl.toString();\n```\n\n## glWiretap() methods\n### glWiretap().addComment()\nAdd a comment for later when calling `glWiretap().toString()`, to help human doing debugging\n\n### glWiretap().toString()\nThis is where the gl context outputs all values as runnable javascript.\nThe value for context here is `gl` by default, for simplicity.\nBut can be changed to the value of with `options.contextName`.\nAny variables created here (example: `gl.createProgram()`, or `gl.createShader(gl.VERTEX_SHADER)`) are simply constants that increment on an index to prevent collision.\n\n### glWiretap().checkThrowError()\nCauses a thrown exception when error detected from `gl` context, to help human doing debugging\n\n### glWiretap().getReadPixelsVariableName()\nGets the last internal variable name used as a target value for `gl.readPixels()`\n\n### glWiretap().insertVariable(name, value)\nInsert a value into the `glWiretap()` playback string.\n\n### glWiretap().reset()\nReset the playback string.\n\n### glWiretap().setIndent(spaces)\nSet the playback indentation.  Useful for formatting results.\n\n### glWiretap().getContextVariableName(value)\nGet a variable name from the context.  Useful for adding additional functionality to, for example, textures, etc.\n\n## glWiretap options\n* contextName: String - A string that refers to the gl context for `glWiretap().toString()`\n* recording: String[] - A array of strings that\n* readPixelsFile: String - When set, writes a file by this name to the current directory when on node HeadlessGL using readPixels\n* throwGetError: Boolean - Causes `gl.getError()` to throw if there is an error\n* throwGetShaderParameter: Boolean - Causes `gl.getShaderParameter()` to throw if there is an error\n* throwGetProgramParameter: Boolean - Causes `gl.getProgramParameter()` to throw if there is an error\n* onReadPixels: Function(targetName, argumentAsStrings);\n* onUnrecognizedArgumentLookup: Function(argument) => string - Allows for just in time value tracking and insertion.\n\n## Typescript support\nBy default, typescript is supported\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/robertleeplummerjr/gl-wiretap.git"
  },
  "scripts": {
    "coverage": "nyc --reporter=html mocha && open coverage/index.html",
    "test": "mocha"
  },
  "version": "0.6.2"
}
